"use strict";(self.webpackChunkdotslash_website=self.webpackChunkdotslash_website||[]).push([[243],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>E,useMDXComponents:()=>p,withMDXComponents:()=>l});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),l=function(e){return function(t){var n=p(t.components);return r.createElement(e,i({},t,{components:n}))}},p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},f="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(n),u=o,f=l["".concat(a,".").concat(u)]||l[u]||h[u]||i;return n?r.createElement(f,c(c({ref:t},d),{},{components:n})):r.createElement(f,c({ref:t},d))}));function E(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[f]="string"==typeof e?e:o,a[1]=c;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const i={sidebar_position:20},a="How DotSlash Works",c={unversionedId:"execution",id:"execution",title:"How DotSlash Works",description:"Here is a flowchart that demonstrates what happens when a user invokes",source:"@site/docs/execution.md",sourceDirName:".",slug:"/execution",permalink:"/docs/execution",draft:!1,editUrl:"https://github.com/facebook/dotslash/tree/main/website/docs/execution.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Generating DotSlash files Using GitHub Actions",permalink:"/docs/github"},next:{title:"Limitations",permalink:"/docs/limitations"}},s={},d=[],l=(p="Mermaid",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var p;const u={toc:d},f="wrapper";function h(e){let{components:t,...n}=e;return(0,o.mdx)(f,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"how-dotslash-works"},"How DotSlash Works"),(0,o.mdx)("p",null,"Here is a flowchart that demonstrates what happens when a user invokes\n",(0,o.mdx)("inlineCode",{parentName:"p"},"./scripts/node --version")," on the command line when ",(0,o.mdx)("inlineCode",{parentName:"p"},"./scripts/node")," is a\nDotSlash file. Note this is what happens on Mac and Linux, as the behavior on\n",(0,o.mdx)("a",{parentName:"p",href:"../windows"},"Windows")," is slightly different."),(0,o.mdx)(l,{chart:"\nflowchart TD\n    USER_INVOCATION(<code>./scripts/node --version</code>) --\x3eSHEBANG_EXPANSION\n    SHEBANG_EXPANSION(<code>/usr/local/bin/dotslash ./scripts/node --version) --\x3e|DotSlash parses <code>./scripts/node</code> to build the <code>exec</code> invocation| EXEC\n    EXEC{{<code>exec $DOTSLASH_CACHE/fe/40b2ce9a.../node --version</code>}} --\x3e|<code>exec</code> fails with <code>ENOENT</code> because<br>the artifact is not in the cache| ACQUIRE_LOCK\n    EXEC --\x3e|artifact in cache| EXEC_SUCCEEDS\n    EXEC_SUCCEEDS(<code>exec</code> replaces <code>dotslash</code> process)\n    ACQUIRE_LOCK(acquire file lock for artifact) --\x3eF\n    F{{check if artifact exists in cache}} --\x3e|No| FETCH\n    F --\x3e|Yes: the artifact must have<br>been fetched by another caller<br>while we were waiting<br>to acquire the lock| RELEASE_LOCK\n    FETCH(fetch artifact using <code>providers</code><br>in the DotSlash file) --\x3e ON_FETCH\n    ON_FETCH(verify artifact size and hash) --\x3e DECOMPRESS\n    DECOMPRESS(decompress artifact in temp directory) --\x3e SANITIZE\n    SANITIZE(sanitize temp directory) --\x3e RENAME\n    RENAME(<code>mv</code> temp directory to final destination) --\x3e RELEASE_LOCK\n    RELEASE_LOCK(release file lock) --\x3e EXEC_TAKE2\n    EXEC_TAKE2(<code>exec $DOTSLASH_CACHE/fe/40b2ce9a.../node --version</code>)\n    EXEC_TAKE2 --\x3e EXEC_SUCCEEDS\n",mdxType:"Mermaid"}))}h.isMDXComponent=!0}}]);