"use strict";(self.webpackChunkdotslash_website=self.webpackChunkdotslash_website||[]).push([[971],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>p});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),p=function(e){return function(n){var t=m(n.components);return a.createElement(e,r({},n,{components:t}))}},m=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(d.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=m(t),c=o,u=p["".concat(i,".").concat(c)]||p[c]||h[c]||r;return t?a.createElement(u,s(s({ref:n},d),{},{components:t})):a.createElement(u,s({ref:n},d))}));function x(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},21269:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(87462),o=(t(67294),t(3905));const r={sidebar_position:0},i="Introduction",s={unversionedId:"index",id:"index",title:"Introduction",description:"DotSlash (dotslash) is a command-line tool that is designed to facilitate",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,editUrl:"https://github.com/facebook/dotslash/tree/main/website/docs/index.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",next:{title:"Motivation",permalink:"/docs/motivation"}},l={},d=[{value:"Example: Vendoring Node.js in a Repo (Traditional)",id:"example-vendoring-nodejs-in-a-repo-traditional",level:2},{value:"Example: Vendoring Node.js in a Repo (with DotSlash!)",id:"example-vendoring-nodejs-in-a-repo-with-dotslash",level:2}],p={toc:d},m="wrapper";function c(e){let{components:n,...t}=e;return(0,o.mdx)(m,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"introduction"},"Introduction"),(0,o.mdx)("p",null,"DotSlash (",(0,o.mdx)("inlineCode",{parentName:"p"},"dotslash"),") is a command-line tool that is designed to facilitate\nfetching an executable, verifying it, and then running it. It maintains a local\ncache of fetched executables so that subsequent invocations are fast."),(0,o.mdx)("p",null,"DotSlash helps keeps heavyweight binaries out of your repo while ensuring your\ndevelopers seamlessly get the tools they need, ensuring consistent builds across\nplatforms. At Meta, DotSlash is executed ",(0,o.mdx)("em",{parentName:"p"},"hundreds of millions of times per day"),"\nto deliver a mix of first-party and third-party tools to end-user developers as\nwell as hermetic build environments."),(0,o.mdx)("p",null,"While the page on ",(0,o.mdx)("a",{parentName:"p",href:"./motivation"},"Motivation")," details the benefits of DotSlash\nand the thinking behind its design, here we will try to illustrate the value\nwith a concrete example:"),(0,o.mdx)("h2",{id:"example-vendoring-nodejs-in-a-repo-traditional"},"Example: Vendoring Node.js in a Repo (Traditional)"),(0,o.mdx)("p",null,"Suppose you have a project that depends on Node.js. To ensure that everyone on\nyour team uses the same version of Node.js, traditionally, you would add the\nfollowing files to your repo and ask contributors to reference ",(0,o.mdx)("inlineCode",{parentName:"p"},"scripts/node"),"\nfrom your repo instead of assuming ",(0,o.mdx)("inlineCode",{parentName:"p"},"node")," is on the ",(0,o.mdx)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"scripts/node-mac-v18.19.0")," the universal macOS binary for Node.js"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"scripts/node-linux-v18.19.0")," the x86_64 Linux binary for Node.js"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"scripts/node")," a shell script with the following contents:")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# Copied from https://stackoverflow.com/a/246128.\nDIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"\n\nif [ "$(uname)" == "Darwin" ]; then\n  # In this example, assume node-mac-v18.19.0 is a universal macOS binary.\n  "$DIR/node-mac-v18.19.0" "$@"\nelse\n  "$DIR/node-linux-v18.19.0" "$@"\nfi\n\nexit $?\n')),(0,o.mdx)("p",null,"Downsides with this approach:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Binary files are checked into the repo, making ",(0,o.mdx)("inlineCode",{parentName:"li"},"git clone")," more expensive."),(0,o.mdx)("li",{parentName:"ul"},"Further, every user has to pay the cost of downloading an executable they are\nguaranteed not to use because it is for a different operating system."),(0,o.mdx)("li",{parentName:"ul"},"Three files are being used to represent one executable, making it all too easy\nto update one of the files but not the others."),(0,o.mdx)("li",{parentName:"ul"},"The Bash script has to execute additional processes (for ",(0,o.mdx)("inlineCode",{parentName:"li"},"dirname"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"uname"),",\nand ",(0,o.mdx)("inlineCode",{parentName:"li"},"["),") before it ultimately runs Node.js.")),(0,o.mdx)("h2",{id:"example-vendoring-nodejs-in-a-repo-with-dotslash"},"Example: Vendoring Node.js in a Repo (with DotSlash!)"),(0,o.mdx)("p",null,"To solve the above problem with DotSlash, do the following:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Compress each platform-specific executable (or ",(0,o.mdx)("inlineCode",{parentName:"li"},".tar")," file containing the\nexecutable) with ",(0,o.mdx)("inlineCode",{parentName:"li"},"gzip")," or ",(0,o.mdx)("a",{parentName:"li",href:"https://facebook.github.io/zstd/"},(0,o.mdx)("inlineCode",{parentName:"a"},"zstd"))," and\nrecord the resulting size, in bytes, as well as the\n",(0,o.mdx)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/BLAKE_(hash_function)#BLAKE3"},"BLAKE3")," or\n",(0,o.mdx)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/SHA-2"},"SHA-256")," hash."),(0,o.mdx)("li",{parentName:"ul"},"Upload each artifact to a URL accessible to your target audience. For example,\nan internal-only executable might be served from a URL that is restricted to\nusers on a VPN."),(0,o.mdx)("li",{parentName:"ul"},"Rewrite the shell script at ",(0,o.mdx)("inlineCode",{parentName:"li"},"scripts/node")," with this information, structured\nas follows:")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env dotslash\n\n// The URLs in this file were taken from https://nodejs.org/dist/v18.19.0/\n\n{\n  "name": "node-v18.19.0",\n  "platforms": {\n    "macos-aarch64": {\n      "size": 40660307,\n      "hash": "blake3",\n      "digest": "6e2ca33951e586e7670016dd9e503d028454bf9249d5ff556347c3d98c347c34",\n      "format": "tar.gz",\n      "path": "node-v18.19.0-darwin-arm64/bin/node",\n      "providers": [\n        {\n          "url": "https://nodejs.org/dist/v18.19.0/node-v18.19.0-darwin-arm64.tar.gz"\n        }\n      ]\n    },\n    "macos-x86_64": {\n      "size": 42202872,\n      "hash": "blake3",\n      "digest": "37521058114e7f71e0de3fe8042c8fa7908305e9115488c6c29b514f9cd2a24c",\n      "format": "tar.gz",\n      "path": "node-v18.19.0-darwin-x64/bin/node",\n      "providers": [\n        {\n          "url": "https://nodejs.org/dist/v18.19.0/node-v18.19.0-darwin-x64.tar.gz"\n        }\n      ]\n    },\n    "linux-x86_64": {\n      "size": 44694523,\n      "hash": "blake3",\n      "digest": "72b81fc3a30b7bedc1a09a3fafc4478a1b02e5ebf0ad04ea15d23b3e9dc89212",\n      "format": "tar.gz",\n      "path": "node-v18.19.0-linux-x64/bin/node",\n      "providers": [\n        {\n          "url": "https://nodejs.org/dist/v18.19.0/node-v18.19.0-linux-x64.tar.gz"\n        }\n      ]\n    }\n  }\n}\n')),(0,o.mdx)("p",null,"Note that in the above example, we leverage DotSlash to distribute\n",(0,o.mdx)("em",{parentName:"p"},"architecture"),"-specific executables for macOS so users can download smaller,\nmore specific binaries. If the archive contained a universal macOS binary, there\nwould still be individual entries for both ",(0,o.mdx)("inlineCode",{parentName:"p"},'"macos-x86_64"')," and\n",(0,o.mdx)("inlineCode",{parentName:"p"},'"macos-aarch64"')," in the DotSlash file, but the values would be the same."),(0,o.mdx)("p",null,"Assuming ",(0,o.mdx)("inlineCode",{parentName:"p"},"dotslash")," is on your ",(0,o.mdx)("inlineCode",{parentName:"p"},"$PATH")," and you remembered to\n",(0,o.mdx)("inlineCode",{parentName:"p"},"chmod +x ./scripts/node")," to mark it as executable, you should be able to run\nyour Node.js wrapper exactly as you did before:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-shell"},"$ ./scripts/node --version\nv18.19.0\n")),(0,o.mdx)("p",null,"The first time you run ",(0,o.mdx)("inlineCode",{parentName:"p"},"./scripts/node --version"),", you will likely experience a\nsmall delay while DotSlash fetches, decompresses, and verifies the appropriate\n",(0,o.mdx)("inlineCode",{parentName:"p"},".zst"),", but subsequent invocations should be instantaneous."),(0,o.mdx)("p",null,"To understand what is happening under the hood, see\n",(0,o.mdx)("a",{parentName:"p",href:"./execution"},"How DotSlash Works"),"."))}c.isMDXComponent=!0}}]);